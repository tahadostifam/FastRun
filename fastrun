#!/usr/bin/env ruby

require "bundler/setup"
require "dry/cli"
require "securerandom"
require "colorize"

FAST_RUN_INFO = {
  :version => "1.2",
}

module RunCode
  module Lib
    def self.get_compiler_cli_name(extname)
      r = ""
      case extname
      when ".cpp"
        r = "g++"
      when ".c"
        r = "gcc"
      else
        puts "Bad file! #{extname} not supported."
        exit
      end
      r
    end

    def self.format_home_path(path)
      user = `echo $USER`
      home_path = "/home/#{user[0..(user.length - 2)].to_s}/"
      s = path.clone
      s = s.gsub("~/", home_path)
      return s
    end

    def self.make_compile_file_cmd(extname, filename, output_filename, compile_args, std_args, header_files, headers_dirs)
      s = "#{RunCode::Lib.get_compiler_cli_name(extname)} #{filename.strip}"

      if compile_args.length > 0
        s += " #{compile_args.join(" ")}"
      end

      if std_args.length > 0
        s += " -std=#{std_args.join(" ")}"
      end

      if (header_files.length > 0 && headers_dirs.length == 0) || (header_files.length == 0 && headers_dirs.length > 0)
        if header_files.length > 0
          errors_list = []

          header_files.each do |item|
            formated_path = format_home_path(item)

            unless File.exists? formated_path
              errors_list << "  - #{formated_path}".red
            end
          end

          if errors_list.length > 0
            puts "Some of header files not found: ".light_yellow

            puts errors_list.join(" ")

            exit
          else
            s += " #{header_files.join(" ")}"
          end
        end

        if headers_dirs.length > 0
          errors_list = []

          headers_dirs.each do |item|
            formated_path = format_home_path(item)

            unless File.exists? formated_path
              errors_list << "Dir not found  - #{formated_path}".red
            else
              unless File.directory? formated_path
                errors_list << "Only dir allowed  - #{formated_path}".red
              end
            end
          end

          if errors_list.length > 0
            puts "We got some errors: ".light_yellow

            puts errors_list.join(" ")

            exit
          else
            headers_dir_str = ""
            headers_dirs.each do |item|
              formated_path = format_home_path(item)
              headers_dir_str += " -I/#{formated_path}"
            end

            puts headers_dir_str.yellow # FIXME

            s += " #{headers_dir_str}"
          end
        end
      else
        puts "You can't use --header-files and --headers-dir in same time.".red

        exit
      end

      s += " -o #{output_filename}"

      return s
    end
  end

  module CLI
    module Commands
      # extend Dry::CLI::Registry
      extend Dry::CLI::Registry

      class Version < Dry::CLI::Command
        desc "Print version."

        def call(*)
          puts FAST_RUN_INFO[:version]
        end
      end

      class Run < Dry::CLI::Command
        desc "Compile and execute c/c++ file."

        argument :filename, type: :string, desc: "Your C/C++ file name."
        option :compile_args, type: :array, default: [], desc: "Compile arguments"
        option :std_args, type: :array, default: [], desc: "Std arguments"
        option :header_files, type: :array, default: [], desc: "Header files"
        option :headers_dirs, type: :array, default: [], desc: "Headers directory"

        example [
                  "run ./src/hello_world.cpp",
                  "run ./src/hello_world.cpp --compile-args=-Wall",
                ]

        def call(filename: nil, compile_args: [], std_args: [], header_files: [], headers_dirs: [], **)
          if filename
            if File.exists? filename
              random_tmp_file_name = SecureRandom.hex(15)
              formated_bash_cmd = Lib.make_compile_file_cmd(
                File.extname(filename),
                filename,
                "/tmp/#{random_tmp_file_name}",
                compile_args,
                std_args,
                header_files,
                headers_dirs
              )

              r = `#{formated_bash_cmd}`
              if $?.exitstatus == 0
                pid = spawn("/tmp/#{random_tmp_file_name}")

                Process.wait pid
              else
                exit
              end
            else
              puts "File not found!"
            end
          else
            puts "File name required! please checkout --help."
          end
        end
      end

      class Compile < Dry::CLI::Command
        desc "Just compiles c/c++ file."

        argument :filename, type: :string, desc: "Your C/C++ file name."
        argument :output, type: :string, desc: "Output file name."
        option :compile_args, type: :array, default: [], desc: "Compile arguments"
        option :std_args, type: :array, default: [], desc: "Std arguments"
        option :header_files, type: :array, default: [], desc: "Header files"
        option :headers_dirs, type: :array, default: [], desc: "Headers directory"

        example [
                  "compile ./src/hello_world.cpp ./hello_world",
                  "compile ./src/hello_world.cpp ./hello_world --compile-args=-Wall",
                  "compile ./src/hello_world.cpp ./hello_world --compile-args=-Wall --std=c++17",
                ]

        def call(filename: nil, output: nil, compile_args: [], std_args: [], header_files: [], headers_dirs: [], **)
          if filename != nil && output != nil
            if filename
              if File.exists? filename
                formated_bash_cmd = Lib.make_compile_file_cmd(
                  File.extname(filename),
                  filename,
                  output,
                  compile_args,
                  std_args,
                  header_files,
                  headers_dirs
                )
                r = `#{formated_bash_cmd}`
                if $?.exitstatus == 0
                  puts "Compiled successully!"
                else
                  exit
                end
              else
                puts "file not found!"
              end
            else
              puts "file name required! please checkout --help"
            end
          else
            puts "All arguments required! please checkout --help"
          end
        end
      end

      register "run", Run, aliases: ["r", "run", "exec"]
      register "compile", Compile, aliases: ["c", "compile"]
      register "version", Version, aliases: ["v", "-v", "--version", "version"]
    end
  end
end

Dry::CLI.new(RunCode::CLI::Commands).call
